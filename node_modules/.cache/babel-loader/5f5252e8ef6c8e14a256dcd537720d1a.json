{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\React\\\\lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\React\\\\lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/*\n * Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n */\n\nclass Board extends Component {\n  constructor(props) {\n    super(props); // TODO: set initial state\n\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  createBoard() {\n    var board = []; // TODO: create array-of-arrays of true/false values\n\n    for (var y = 0; y < this.props.nrows; y++) {\n      var row = [];\n\n      for (var x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  flipCellsAround(coord) {\n    var _this$props = this.props,\n        ncols = _this$props.ncols,\n        nrows = _this$props.nrows;\n    var board = this.state.board;\n\n    var _coord$split$map = coord.split(\"-\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    } // TODO: flip this cell and the cells around it\n\n\n    flipCell(y, x); //Flip initial cell\n\n    flipCell(y, x - 1); //flip left\n\n    flipCell(y, x + 1); //flip right\n\n    flipCell(y - 1, x); //flip below\n\n    flipCell(y + 1, x); //flip above\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    var hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({\n      board: board,\n      hasWon: hasWon\n    });\n  }\n  /** Render game board or winning message. */\n\n\n  makeTable() {\n    var _this = this;\n\n    var tblBoard = [];\n\n    for (var y = 0; y < this.props.nrows; y++) {\n      var row = [];\n\n      var _loop = function _loop(x) {\n        var coord = \"\".concat(y, \"-\").concat(x);\n        row.push( /*#__PURE__*/React.createElement(Cell, {\n          key: coord,\n          isLit: _this.state.board[y][x],\n          flipCellsAroundMe: () => _this.flipCellsAround(coord),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 11\n          }\n        }));\n      };\n\n      for (var x = 0; x < this.props.ncols; x++) {\n        _loop(x);\n      }\n\n      tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n        key: y,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, row));\n    }\n\n    return /*#__PURE__*/React.createElement(\"table\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, tblBoard));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, this.state.hasWon ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"winner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"neon-orange\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \"YOU\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"neon-blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, \"WIN!\")) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"neon-orange\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }, \"Lights\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"neon-blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, \"Out\")), this.makeTable()));\n  }\n\n}\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/React/lights-out/src/Board.js"],"names":["React","Component","Cell","Board","constructor","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","split","map","Number","flipCell","every","cell","setState","makeTable","tblBoard","render","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAM5BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,KAAKC,WAAL;AAFI,KAAb;AAID;AAED;;;AAEAA,EAAAA,WAAW,GAAG;AACZ,QAAID,KAAK,GAAG,EAAZ,CADY,CAEZ;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAIE,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCD,QAAAA,GAAG,CAACG,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgB,KAAKZ,KAAL,CAAWa,mBAApC;AACD;;AACDV,MAAAA,KAAK,CAACO,IAAN,CAAWH,GAAX;AACD;;AACD,WAAOJ,KAAP;AACD;AAED;;;AAEAW,EAAAA,eAAe,CAACC,KAAD,EAAQ;AAAA,sBACE,KAAKf,KADP;AAAA,QACfS,KADe,eACfA,KADe;AAAA,QACRH,KADQ,eACRA,KADQ;AAErB,QAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFqB,2BAGRY,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,QAGhBb,CAHgB;AAAA,QAGbG,CAHa;;AAKrB,aAASW,QAAT,CAAkBd,CAAlB,EAAqBG,CAArB,EAAwB;AACtB;AAEA,UAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGC,KAAd,IAAuBJ,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGC,KAAzC,EAAgD;AAC9CH,QAAAA,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,IAAc,CAACL,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,CAAf;AACD;AACF,KAXoB,CAYrB;;;AACAW,IAAAA,QAAQ,CAACd,CAAD,EAAIG,CAAJ,CAAR,CAbqB,CAaL;;AAChBW,IAAAA,QAAQ,CAACd,CAAD,EAAIG,CAAC,GAAG,CAAR,CAAR,CAdqB,CAcD;;AACpBW,IAAAA,QAAQ,CAACd,CAAD,EAAIG,CAAC,GAAG,CAAR,CAAR,CAfqB,CAeD;;AACpBW,IAAAA,QAAQ,CAACd,CAAC,GAAG,CAAL,EAAQG,CAAR,CAAR,CAhBqB,CAgBD;;AACpBW,IAAAA,QAAQ,CAACd,CAAC,GAAG,CAAL,EAAQG,CAAR,CAAR,CAjBqB,CAiBD;AAEpB;AACA;;AACA,QAAIN,MAAM,GAAGC,KAAK,CAACiB,KAAN,CAAYb,GAAG,IAAIA,GAAG,CAACa,KAAJ,CAAUC,IAAI,IAAI,CAACA,IAAnB,CAAnB,CAAb;AAEA,SAAKC,QAAL,CAAc;AAAEnB,MAAAA,KAAK,EAAEA,KAAT;AAAgBD,MAAAA,MAAM,EAAEA;AAAxB,KAAd;AACD;AAED;;;AACAqB,EAAAA,SAAS,GAAG;AAAA;;AACV,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAIE,GAAG,GAAG,EAAV;;AADyC,iCAEhCC,CAFgC;AAGvC,YAAIO,KAAK,aAAMV,CAAN,cAAWG,CAAX,CAAT;AACAD,QAAAA,GAAG,CAACG,IAAJ,eACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEK,KADP;AAEE,UAAA,KAAK,EAAE,KAAI,CAACd,KAAL,CAAWE,KAAX,CAAiBE,CAAjB,EAAoBG,CAApB,CAFT;AAGE,UAAA,iBAAiB,EAAE,MAAM,KAAI,CAACM,eAAL,CAAqBC,KAArB,CAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAJuC;;AAEzC,WAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AAAA,cAAlCA,CAAkC;AAS1C;;AACDgB,MAAAA,QAAQ,CAACd,IAAT,eAAc;AAAI,QAAA,GAAG,EAAEL,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAaE,GAAb,CAAd;AACD;;AACD,wBACE;AAAO,MAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQiB,QAAR,CADF,CADF;AAKD;;AACDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKxB,KAAL,CAAWC,MAAX,gBACC;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CADD,gBAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,CADF,EAKG,KAAKqB,SAAL,EALH,CAPJ,CADF;AAkBD;;AArG2B;;AAAxBzB,K,CACG4B,Y,GAAe;AACpBpB,EAAAA,KAAK,EAAE,CADa;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBI,EAAAA,mBAAmB,EAAE;AAHD,C;AAuGxB,eAAef,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/*\n * Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n */\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //flip left\n    flipCell(y, x + 1); //flip right\n    flipCell(y - 1, x); //flip below\n    flipCell(y + 1, x); //flip above\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  /** Render game board or winning message. */\n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>\n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            {this.makeTable()}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}