{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\React\\\\lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\React\\\\lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  constructor(props) {\n    super(props); // TODO: set initial state\n\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  createBoard() {\n    var board = []; // TODO: create array-of-arrays of true/false values\n\n    for (var y = 0; y < this.props.nrows; y++) {\n      var row = [];\n\n      for (var x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  flipCellsAround(coord) {\n    console.log('Flipping!', coord);\n    var _this$props = this.props,\n        ncols = _this$props.ncols,\n        nrows = _this$props.nrows;\n    var board = this.state.board;\n\n    var _coord$split$map = coord.split(\"-\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x); // Flip initial Cell\n\n    flipCell(y, x - 1); // Flip left\n\n    flipCell(y, x + 1); //Flip right\n\n    flipCell(y - 1, x); //Flip below\n\n    flipCell(y + 1, x); //Flip above \n    // TODO: flip this cell and the cells around it\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    var hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({\n      board,\n      hasWon\n    });\n  }\n  /** Render game board or winning message. */\n\n\n  render() {\n    var _this = this;\n\n    if (this.state.hasWon) {\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 14\n        }\n      }, \"You Win!!\");\n    }\n\n    var tblBoard = [];\n\n    for (var y = 0; y < this.props.nrows; y++) {\n      var row = [];\n\n      var _loop = function _loop(x) {\n        var coord = \"\".concat(y, \"-\").concat(x);\n        row.push( /*#__PURE__*/React.createElement(Cell, {\n          key: coord,\n          isLit: _this.state.board[y][x],\n          flipCellsAroundMe: () => _this.flipCellsAround(coord),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 18\n          }\n        }));\n      };\n\n      for (var x = 0; x < this.props.ncols; x++) {\n        _loop(x);\n      }\n\n      tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n        key: y,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }, row));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"neon-orange\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, \"Lights\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"neon-blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, \"Out\")), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, tblBoard)));\n  }\n\n}\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/React/lights-out/src/Board.js"],"names":["React","Component","Cell","Board","constructor","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","console","log","split","map","Number","flipCell","every","cell","setState","render","tblBoard","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAO5BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,KAAKC,WAAL;AAFI,KAAb;AAID;AAED;;;AAEAA,EAAAA,WAAW,GAAG;AACZ,QAAID,KAAK,GAAG,EAAZ,CADY,CAEZ;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAAhC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,UAAIE,GAAG,GAAG,EAAV;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA9B,EAAqCD,CAAC,EAAtC,EAAyC;AACvCD,QAAAA,GAAG,CAACG,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgB,KAAKZ,KAAL,CAAWa,mBAApC;AACD;;AACDV,MAAAA,KAAK,CAACO,IAAN,CAAWH,GAAX;AACD;;AACD,WAAOJ,KAAP;AACD;AAED;;;AAEAW,EAAAA,eAAe,CAACC,KAAD,EAAQ;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB;AADqB,sBAEA,KAAKf,KAFL;AAAA,QAEhBS,KAFgB,eAEhBA,KAFgB;AAAA,QAETH,KAFS,eAETA,KAFS;AAGrB,QAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAHqB,2BAIRY,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAJQ;AAAA;AAAA,QAIhBf,CAJgB;AAAA,QAIbG,CAJa;;AAOrB,aAASa,QAAT,CAAkBhB,CAAlB,EAAqBG,CAArB,EAAwB;AACtB;AAEA,UAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGC,KAAd,IAAuBJ,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGC,KAAzC,EAAgD;AAC9CH,QAAAA,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,IAAc,CAACL,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,CAAf;AACD;AACF;;AACDa,IAAAA,QAAQ,CAAChB,CAAD,EAAIG,CAAJ,CAAR,CAdqB,CAcL;;AAChBa,IAAAA,QAAQ,CAAChB,CAAD,EAAIG,CAAC,GAAG,CAAR,CAAR,CAfqB,CAeD;;AACpBa,IAAAA,QAAQ,CAAChB,CAAD,EAAIG,CAAC,GAAG,CAAR,CAAR,CAhBqB,CAgBD;;AACpBa,IAAAA,QAAQ,CAAChB,CAAC,GAAG,CAAL,EAAQG,CAAR,CAAR,CAjBqB,CAiBD;;AACpBa,IAAAA,QAAQ,CAAChB,CAAC,GAAG,CAAL,EAAQG,CAAR,CAAR,CAlBqB,CAkBD;AAEpB;AAEA;AACA;;AACA,QAAIN,MAAM,GAAGC,KAAK,CAACmB,KAAN,CAAYf,GAAG,IAAIA,GAAG,CAACe,KAAJ,CAAUC,IAAI,IAAI,CAACA,IAAnB,CAAnB,CAAb;AACA,SAAKC,QAAL,CAAc;AAACrB,MAAAA,KAAD;AAAQD,MAAAA;AAAR,KAAd;AACD;AAGD;;;AAEAuB,EAAAA,MAAM,GAAG;AAAA;;AACP,QAAI,KAAKxB,KAAL,CAAWC,MAAf,EAAuB;AACrB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACD;;AACD,QAAIwB,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAIE,GAAG,GAAG,EAAV;;AADyC,iCAEhCC,CAFgC;AAGvC,YAAIO,KAAK,aAAMV,CAAN,cAAWG,CAAX,CAAT;AACAD,QAAAA,GAAG,CAACG,IAAJ,eAAS,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEK,KAAX;AAAkB,UAAA,KAAK,EAAE,KAAI,CAACd,KAAL,CAAWE,KAAX,CAAiBE,CAAjB,EAAoBG,CAApB,CAAzB;AAAiD,UAAA,iBAAiB,EAAE,MAAM,KAAI,CAACM,eAAL,CAAqBC,KAArB,CAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AAJuC;;AAEzC,WAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AAAA,cAAlCA,CAAkC;AAG1C;;AACDkB,MAAAA,QAAQ,CAAChB,IAAT,eAAc;AAAI,QAAA,GAAG,EAAEL,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAaE,GAAb,CAAd;AACD;;AACD,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFA,CADF,eAKE;AAAO,MAAA,SAAS,EAAE,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQmB,QAAR,CADA,CALF,CADF;AAYD;;AA1F2B;;AAAxB5B,K,CACG6B,Y,GAAe;AACpBrB,EAAAA,KAAK,EAAE,CADa;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBI,EAAAA,mBAAmB,EAAE;AAHD,C;AA6FxB,eAAef,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0 ; y < this.props.nrows; y++) {\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log('Flipping!', coord);\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x); // Flip initial Cell\n    flipCell(y, x - 1); // Flip left\n    flipCell(y, x + 1); //Flip right\n    flipCell(y - 1, x); //Flip below\n    flipCell(y + 1, x); //Flip above \n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    if (this.state.hasWon) {\n      return <h1>You Win!!</h1>;\n    }\n    let tblBoard = []; \n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(<Cell key={coord} isLit={this.state.board[y][x]} flipCellsAroundMe={() => this.flipCellsAround(coord)} />);\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>); \n    }\n    return(\n      <div>\n        <div className='Board-title'>\n        <div className='neon-orange'>Lights</div>\n        <div className='neon-blue'>Out</div>\n        </div>\n        <table className= 'Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n      </div>\n      \n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}